name: Destroy and Deploy Infrastructure

on:
  workflow_dispatch:
    inputs:
      action:
        description: "Action to perform: 'destroy-deploy' or 'deploy-only'"
        required: true
        default: "deploy-only"

env:
  TF_VAR_project_id: ${{ secrets.GCP_PROJECT_ID }}
  TF_VAR_region: ${{ secrets.GCP_REGION }}
  TF_VAR_zone: ${{ secrets.GCP_ZONE }}
  TF_VAR_ssh_user: ${{ secrets.SSH_USER }}
  TF_VAR_ssh_public_key_path: ${{ secrets.SSH_PUBLIC_KEY_PATH }}

jobs:
  # Destroy Job: Runs if action is 'destroy-deploy'
  destroy:
    name: Destroy Infrastructure
    if: ${{ github.event.inputs.action == 'destroy-deploy' }}
    runs-on: ubuntu-latest
    container:
      image: google/cloud-sdk:latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.7

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}

      - name: Capture Terraform Outputs
        id: tf-outputs
        working-directory: terraform
        run: |
          echo "CLUSTER_NAME=$(terraform output -raw cluster_name || echo '')" >> $GITHUB_ENV
          echo "CLUSTER_LOCATION=$(terraform output -raw location || echo '')" >> $GITHUB_ENV

      - name: Destroy GKE Workloads and Cluster
        run: |
          if [[ -n "$CLUSTER_NAME" && -n "$CLUSTER_LOCATION" ]]; then
            gcloud container clusters get-credentials "$CLUSTER_NAME" --region "$CLUSTER_LOCATION" || true
            kubectl delete -f k8s --ignore-not-found || true
            gcloud container clusters delete "$CLUSTER_NAME" --region "$CLUSTER_LOCATION" --quiet || true
          else
            echo "GKE cluster not found or already deleted."
          fi

      - name: Destroy Compute Instances
        working-directory: terraform
        run: terraform destroy -target=module.compute -auto-approve || true

      - name: Destroy Firewall Rules
        working-directory: terraform
        run: terraform destroy \
            -target=module.network.google_compute_firewall.allow-http \
            -target=module.network.google_compute_firewall.allow-ssh \
            -auto-approve || true

      - name: Force Delete NEGs
        run: |
          gcloud compute network-endpoint-groups list \
            --filter="network:nginx-vpc" \
            --format="value(name, zone)" | while read -r neg zone_url; do
            zone=$(basename "$zone_url")
            echo "Deleting NEG: $neg in zone $zone..."
            gcloud compute network-endpoint-groups delete "$neg" --zone="$zone" --quiet || echo "Could not delete $neg"
          done

      - name: Destroy Remaining Infrastructure
        working-directory: terraform
        run: terraform destroy -auto-approve || true

      - name: Clean up Local Artifacts
        run: |
          rm -rf .ssh
          rm -f ansible/hosts

      - name: Teardown Complete
        run: echo "Infrastructure teardown complete."

  # Deploy Job: Runs after destroy if action is 'destroy-deploy'
  deploy:
    name: Deploy Infrastructure & App
    needs: destroy
    if: always() && ( github.event.inputs.action == 'destroy-deploy' || github.event.inputs.action == 'deploy-only' )
    runs-on: ubuntu-latest
    container:
      image: google/cloud-sdk:latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.7

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}

      - name: Set up Python and Install Ansible
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Ansible and ansible-lint
        run: |
          python -m pip install --upgrade pip
          pip install ansible ansible-lint

      # Terraform deploy steps
      - name: Terraform Init and Apply
        working-directory: terraform
        run: |
          terraform init -input=false
          terraform apply -auto-approve -input=false

      - name: Extract Terraform Outputs
        id: terraform-outputs
        working-directory: terraform
        run: |
          echo "PROXY_IP=$(terraform output -raw proxy_ip)" >> $GITHUB_ENV
          echo "CLUSTER_NAME=$(terraform output -raw cluster_name)" >> $GITHUB_ENV
          echo "CLUSTER_LOCATION=$(terraform output -raw location)" >> $GITHUB_ENV

      - name: Display Terraform Outputs
        run: |
          echo "Proxy IP: $PROXY_IP"
          echo "Cluster Name: $CLUSTER_NAME"
          echo "Cluster Location: $CLUSTER_LOCATION"

      - name: Get GKE Credentials
        run: |
          gcloud container clusters get-credentials "$CLUSTER_NAME" --region "$CLUSTER_LOCATION"

      - name: Deploy Kubernetes Manifests
        run: kubectl apply -f k8s

      - name: Wait for Ingress IP Allocation
        id: wait-ingress
        run: |
          echo "Waiting for Ingress IP allocation on ingress 'ingress'..."
          TIMEOUT=300
          ELAPSED=0
          INGRESS_IP=""
          while [[ ! $INGRESS_IP =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ && $ELAPSED -lt $TIMEOUT ]]; do
            INGRESS_IP=$(kubectl get ingress ingress -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "")
            if [[ ! $INGRESS_IP =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              echo "$(date +%H:%M:%S) Still waiting for Ingress IP..."
              sleep 5
              ELAPSED=$((ELAPSED + 5))
            fi
          done
          if [[ ! $INGRESS_IP =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Timed out waiting for Ingress IP. Exiting."
            exit 1
          fi
          echo "Ingress IP acquired: $INGRESS_IP"
          echo "INGRESS_IP=$INGRESS_IP" >> $GITHUB_ENV

      - name: Create Dynamic Ansible Inventory
        working-directory: ansible
        run: |
          echo "[proxy]" > hosts
          echo "$PROXY_IP ansible_user=debian ansible_ssh_private_key_file=${{ github.workspace }}/.ssh/id_rsa ansible_ssh_common_args='-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'" >> hosts

      - name: Wait for SSH on Proxy VM
        run: |
          echo "Waiting for SSH on $PROXY_IP..."
          until ssh -o StrictHostKeyChecking=no -i .ssh/id_rsa -q debian@"$PROXY_IP" exit; do
            printf "."
            sleep 5
          done
          echo "SSH is available on $PROXY_IP!"

      - name: Install Ansible Collection Dependencies
        working-directory: ansible
        run: ansible-galaxy collection install -r requirements.yml

      - name: Run Ansible Playbook for NGINX Configuration
        working-directory: ansible
        run: |
          ansible-playbook -i hosts nginx-proxy.yml --extra-vars "domain=$INGRESS_IP ingress_ip=$INGRESS_IP" -vv

      - name: Final Output
        run: |
          echo "---------------------------------------------------"
          echo "Reverse Proxy (VM) is accessible at: https://$PROXY_IP"
          echo "GKE Ingress is accessible at: http://$INGRESS_IP"
          echo "---------------------------------------------------"